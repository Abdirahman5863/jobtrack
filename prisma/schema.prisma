// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // uses connection pooling
  directUrl = env("DIRECT_URL") // uses a direct connection
}

model Job {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId         String   @map("user_id") @db.Text
  user           User     @relation("UserJobs", fields: [userId], references: [id], onDelete: Cascade)
  companyName    String   @map("company_name")
  role           String
  status         String   @default("Applied") @db.Text
  salary         String?
  dateSubmitted  DateTime @map("date_submitted") @default(now()) @db.Date
  jobLink        String?  @map("job_link")
  notes          String?
  createdAt      DateTime @map("created_at") @default(now())
  updatedAt      DateTime @map("updated_at") @default(now()) @updatedAt

  @@index([userId], map: "jobs_user_id_idx")
  @@index([status], map: "jobs_status_idx")
  @@map("jobs")
}

model User {
  id         String  @id @db.Text
  email      String  @unique @db.Text
  firstName  String? @map("first_name")
  lastName   String? @map("last_name")
  imageUrl   String? @map("image_url")
  createdAt  DateTime @map("created_at") @default(now())
  updatedAt  DateTime @map("updated_at") @default(now()) @updatedAt

  jobs       Job[]   @relation("UserJobs")
  subscription Subscription?

  @@map("users")
}

model Subscription {
  id                   String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId               String   @unique @map("user_id") @db.Text
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  planId               String   @map("plan_id") @db.Text
  status               String   @default("free") @db.Text
  paymentReference     String?  @map("payment_reference") @db.Text
  currentPeriodStart   DateTime @map("current_period_start") @default(now())
  currentPeriodEnd     DateTime @map("current_period_end") @default(now())
  cancelAtPeriodEnd    Boolean  @map("cancel_at_period_end") @default(false)
  createdAt            DateTime @map("created_at") @default(now())
  updatedAt            DateTime @map("updated_at") @default(now()) @updatedAt

  @@map("subscriptions")
}
